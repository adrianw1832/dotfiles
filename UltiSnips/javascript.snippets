snippet	desc "describe"
describe('${1:description}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet it "it"
it('${1:description}', () => {
	$2
});
endsnippet

snippet proto "prototype"
${1:class_name}.prototype.${2:method_name} = function(${3}) {
	${4}
};
endsnippet

snippet af "arrow function"
(${1}) => $2;
endsnippet

snippet fun "function"
function ${1:function_name}(${2}) {
	$3
};
endsnippet

snippet exe "expect to equal"
expect(${1:subject}).toEqual($2);
endsnippet

snippet exb "expect to be"
expect(${1:subject}).toBe($2);
endsnippet

snippet for "for loop"
for (let i = 0; i < ${1}; i++) {
	$2
}
endsnippet

snippet ife "if else"
if (${1}) {
	$2
} else {
	$3
}
endsnippet

snippet ifei "if else if"
if (${1}) {
	$2
} else if (${3}) {
	$4
} else {
	$5
}
endsnippet

snippet webpackconfig "Simple webpack config" b
const debug = process.env.NODE_ENV !== "production";
const webpack = require('webpack');
const path = require('path');

module.exports = {
  context: path.join(__dirname, "src"),
  devtool: debug ? "inline-sourcemap" : null,
  entry: "./js/client.js",
  module: {
    loaders: [
      {
        test: /\.jsx?$/,
        exclude: /(node_modules|bower_components)/,
        loader: 'babel-loader',
        query: {
          presets: ['react', 'es2015', 'stage-0'],
          plugins: ['react-html-attrs', 'transform-decorators-legacy', 'transform-class-properties'],
        }
      }
    ]
  },
  output: {
    path: __dirname + "/src/",
    filename: "client.min.js"
  },
  plugins: debug ? [] : [
    new webpack.optimize.DedupePlugin(),
    new webpack.optimize.OccurenceOrderPlugin(),
    new webpack.optimize.UglifyJsPlugin({ mangle: false, sourcemap: false }),
  ],
};
endsnippet

snippet req "require" b
require('${1:path}');
endsnippet

snippet cl "Console log" b
console.log("${1:message}", ${2:value});
endsnippet

snippet imp "import from" b
import $1 from "$2";
endsnippet
